# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import smart_city_pb2 as smart__city__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in smart_city_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CameraStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ligar = channel.unary_unary(
                '/smart_city.Camera/Ligar',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.Desligar = channel.unary_unary(
                '/smart_city.Camera/Desligar',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.SetResolucao = channel.unary_unary(
                '/smart_city.Camera/SetResolucao',
                request_serializer=smart__city__pb2.ConfigCamera.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.IniciarGravacao = channel.unary_unary(
                '/smart_city.Camera/IniciarGravacao',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.PararGravacao = channel.unary_unary(
                '/smart_city.Camera/PararGravacao',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.getStatus = channel.unary_unary(
                '/smart_city.Camera/getStatus',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.StatusCamera.FromString,
                _registered_method=True)


class CameraServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Desligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetResolucao(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IniciarGravacao(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PararGravacao(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Ligar,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'Desligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Desligar,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'SetResolucao': grpc.unary_unary_rpc_method_handler(
                    servicer.SetResolucao,
                    request_deserializer=smart__city__pb2.ConfigCamera.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'IniciarGravacao': grpc.unary_unary_rpc_method_handler(
                    servicer.IniciarGravacao,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'PararGravacao': grpc.unary_unary_rpc_method_handler(
                    servicer.PararGravacao,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.StatusCamera.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_city.Camera', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('smart_city.Camera', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Camera(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Camera/Ligar',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Desligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Camera/Desligar',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetResolucao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Camera/SetResolucao',
            smart__city__pb2.ConfigCamera.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IniciarGravacao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Camera/IniciarGravacao',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PararGravacao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Camera/PararGravacao',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Camera/getStatus',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.StatusCamera.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PosteStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LigarLampada = channel.unary_unary(
                '/smart_city.Poste/LigarLampada',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.DesligarLampada = channel.unary_unary(
                '/smart_city.Poste/DesligarLampada',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.SetIntensidade = channel.unary_unary(
                '/smart_city.Poste/SetIntensidade',
                request_serializer=smart__city__pb2.ConfigPoste.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.getStatus = channel.unary_unary(
                '/smart_city.Poste/getStatus',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.StatusPoste.FromString,
                _registered_method=True)


class PosteServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LigarLampada(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DesligarLampada(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetIntensidade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PosteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LigarLampada': grpc.unary_unary_rpc_method_handler(
                    servicer.LigarLampada,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'DesligarLampada': grpc.unary_unary_rpc_method_handler(
                    servicer.DesligarLampada,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'SetIntensidade': grpc.unary_unary_rpc_method_handler(
                    servicer.SetIntensidade,
                    request_deserializer=smart__city__pb2.ConfigPoste.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.StatusPoste.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_city.Poste', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('smart_city.Poste', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Poste(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LigarLampada(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Poste/LigarLampada',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DesligarLampada(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Poste/DesligarLampada',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetIntensidade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Poste/SetIntensidade',
            smart__city__pb2.ConfigPoste.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Poste/getStatus',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.StatusPoste.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SemaforoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ligar = channel.unary_unary(
                '/smart_city.Semaforo/Ligar',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.Desligar = channel.unary_unary(
                '/smart_city.Semaforo/Desligar',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.SetTempos = channel.unary_unary(
                '/smart_city.Semaforo/SetTempos',
                request_serializer=smart__city__pb2.ConfigSemaforo.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.ModoEmergencia = channel.unary_unary(
                '/smart_city.Semaforo/ModoEmergencia',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.Vazio.FromString,
                _registered_method=True)
        self.getStatus = channel.unary_unary(
                '/smart_city.Semaforo/getStatus',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.StatusSemaforo.FromString,
                _registered_method=True)


class SemaforoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Desligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTempos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModoEmergencia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SemaforoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Ligar,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'Desligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Desligar,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'SetTempos': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTempos,
                    request_deserializer=smart__city__pb2.ConfigSemaforo.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'ModoEmergencia': grpc.unary_unary_rpc_method_handler(
                    servicer.ModoEmergencia,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.Vazio.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.StatusSemaforo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_city.Semaforo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('smart_city.Semaforo', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Semaforo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Semaforo/Ligar',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Desligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Semaforo/Desligar',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTempos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Semaforo/SetTempos',
            smart__city__pb2.ConfigSemaforo.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModoEmergencia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Semaforo/ModoEmergencia',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.Vazio.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.Semaforo/getStatus',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.StatusSemaforo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SensorTemperaturaStub(object):
    """Serviços de sensores (se necessário para status)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getUltimaLeitura = channel.unary_unary(
                '/smart_city.SensorTemperatura/getUltimaLeitura',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.DadosTemperatura.FromString,
                _registered_method=True)


class SensorTemperaturaServicer(object):
    """Serviços de sensores (se necessário para status)
    """

    def getUltimaLeitura(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorTemperaturaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getUltimaLeitura': grpc.unary_unary_rpc_method_handler(
                    servicer.getUltimaLeitura,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.DadosTemperatura.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_city.SensorTemperatura', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('smart_city.SensorTemperatura', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SensorTemperatura(object):
    """Serviços de sensores (se necessário para status)
    """

    @staticmethod
    def getUltimaLeitura(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.SensorTemperatura/getUltimaLeitura',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.DadosTemperatura.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SensorQualidadeArStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getUltimaLeitura = channel.unary_unary(
                '/smart_city.SensorQualidadeAr/getUltimaLeitura',
                request_serializer=smart__city__pb2.Vazio.SerializeToString,
                response_deserializer=smart__city__pb2.DadosQualidadeAr.FromString,
                _registered_method=True)


class SensorQualidadeArServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getUltimaLeitura(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorQualidadeArServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getUltimaLeitura': grpc.unary_unary_rpc_method_handler(
                    servicer.getUltimaLeitura,
                    request_deserializer=smart__city__pb2.Vazio.FromString,
                    response_serializer=smart__city__pb2.DadosQualidadeAr.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_city.SensorQualidadeAr', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('smart_city.SensorQualidadeAr', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SensorQualidadeAr(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getUltimaLeitura(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_city.SensorQualidadeAr/getUltimaLeitura',
            smart__city__pb2.Vazio.SerializeToString,
            smart__city__pb2.DadosQualidadeAr.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
